## Parts of FABOUP_Est 29 Jun 2022 ##

# Goal: to minimize negative log likelihood across all subjects

# The gradient must be calculated for each individual subject and this is slow.
# I would like to calculate the gradient for each subject in parallel.

library(nlme)
library(foreach)
library(msos)
library(doParallel)

################################################################################
## Load some simple data
################################################################################

# save(FA_initial, Psi_list, measurement_times, empirical_CovY_list, 
#      all_person_Y_centered, nonzero,
#      file = paste(wd, 'simple_data_for_dan.Rdata'))

#wd <- "/Users/madelineabbott/Dropbox/Dissertation/BreakFree/Break_Free_SimDat/"
wd <- "/home/danbarke/mrabbott/"
load(paste0(wd, 'simple_data_for_dan.Rdata'))

k <- 4; p <- 2
n_subj <- length(Psi_list)

lambda_vec_0 <- FA_initial[1:k]
sigma_u_vec_0 <- FA_initial[(k+1):(2*k)]
theta_vec_0 <- FA_initial[(2*k+1):(3*k)]
m_params_vec <- c(log(lambda_vec_0[1]), lambda_vec_0[2:k], # lambda
                  log(sqrt(sigma_u_vec_0)),
                  log(sqrt(theta_vec_0)))



################################################################################
## Define required functions
################################################################################

# source Cpp code for calculating gradients
Rcpp::sourceCpp(paste0(wd, "gradient_cpp_for_FABOUP.cpp")) 

# objective function: negative log likelihood function for all subjects
FA_negllk <- function(m_params_vec, Psi_list){
  # likelihood
  out <- (sum(unlist(lapply(1:n_subj,
                            FUN = function(i){ FA_negllk_i(m_params_vec, i) }))))
  # gradient
  attr(out, 'gradient') <- ll_grad(m_params_vec, all_person_Y_centered,
                                   Psi_list)
  
  return(out)
}

# negative log likelihood function for a single subject
FA_negllk_i <- function(m_params_vec, i){
  # print('here1')
  ni <- length(measurement_times[i,!is.na(measurement_times[i,])])
  # update Lambda
  lambda_vec <- m_params_vec[1:k]
  lambda_vec[1] <- exp(m_params_vec[1])
  cur_Lambda <- matrix(0, nrow = k, ncol = p)
  cur_Lambda[nonzero == 1] <- lambda_vec
  cur_Lambda_mat <- kronecker(diag(ni), cur_Lambda)
  # update Sigma_u
  log_sigma_u_vec <- m_params_vec[(k+1):(2*k)]
  # add lower bound to prevent est from getting stuck at -Inf
  log_sigma_u_vec <- pmax(log_sigma_u_vec, log(1e-4))
  cur_Sigma_u <- diag((exp(log_sigma_u_vec))^2)
  cur_Sigma_u_mat <- kronecker(matrix(1, nrow = ni, ncol = ni), cur_Sigma_u)
  # update Theta
  log_theta_vec <- m_params_vec[(2*k+1):(3*k)]
  # add lower bound to prevent est from getting stuck at -Inf
  log_theta_vec <- pmax(log_theta_vec, log(1e-4))
  cur_Theta <- diag((exp(log_theta_vec))^2)
  cur_Theta_mat <- kronecker(diag(ni), cur_Theta)
  # update covariance matrix for Yi
  cur_Sigma_star <- cur_Lambda_mat %*% Psi_list[[i]]
  cur_Sigma_star <- cur_Sigma_star %*% t(cur_Lambda_mat)
  cur_Sigma_star <- cur_Sigma_star + cur_Sigma_u_mat + cur_Theta_mat
  cur_Sigma_star <- (cur_Sigma_star + t(cur_Sigma_star))/2
  
  # return negative log likelihood
  return(0.5 * (logdet(cur_Sigma_star)
                + tr(solve(cur_Sigma_star, empirical_CovY_list[[i]]))))
}

# gradient for negative log likelihood for all subjects
ll_grad <- function(m_params, all_person_Y_centered, Psi_list){
  # define non-zero indices of covariance matrices (for Sigma_u and Sigma_e)
  m <- diag(k)
  upperm <- upper.tri(m, diag = T)
  m[upperm] = 1:(choose(k, 2) + k)
  sigma_u_inds <- diag(m)+k
  sigma_e_inds <- (max(sigma_u_inds)+1):(max(sigma_u_inds)+k)
  new_grad_inds <- c(1:k, sigma_u_inds, sigma_e_inds)
  
  # ATTEMPT AT PARALLELIZATION USING %dopar%
  registerDoParallel(cl <- makeCluster(3))
  clusterExport(cl, c("measurement_times", "k", "lli_grad", "p", "nonzero", "grad_lambda_cpp"))
  grad_list <- foreach(i = 1:n_subj) %dopar% {
    ni <- length(measurement_times[i,!is.na(measurement_times[i,])])
    Y_i <- all_person_Y_centered[i, 1:(k*ni)]
    Psi_i <- Psi_list[[i]]
    lli_grad(m_params, Y_i, Psi_i) #[new_grad_inds]
  }
  stopCluster(cl)
  grad_mat <- matrix(unlist(grad_list), ncol = length(new_grad_inds),
                     byrow = TRUE)
  out <- -colSums(grad_mat)
  return(out)
}

# gradient for negative log likelihood for single subject
lli_grad <- function(m_params, Yi, Psi_i){
  # print('there1')
  # input parameters (new June 24 version)
  lambda_vec <- m_params[1:k]
  R.sigma_u_vec <- rep(0, choose(k, 2)+k)
  
  m = diag(k)
  upperm = upper.tri(m, diag = T)
  m[upperm] = 1:(choose(k, 2) + k)
  
  R.sigma_u_vec[diag(m)] <- m_params[(k+1):(2*k)]
  log.theta_vec <- m_params[(2*k+1):(3*k)]
  
  # set up Lambda
  cur_Lambda <- matrix(0, nrow = k, ncol = p)
  cur_Lambda[nonzero==1] <- lambda_vec
  cur_Lambda[1,1] <- exp(cur_Lambda[1,1])
  # set up Sigma_u
  R.Sigma_u <- matrix(0, nrow = k, ncol = k)
  R.Sigma_u[upper.tri(R.Sigma_u, diag = TRUE)] <- R.sigma_u_vec
  diag(R.Sigma_u) <- exp(diag(R.Sigma_u))
  cur_Sigma_u <- crossprod(R.Sigma_u) # parameterized using cholesky decomp
  # set up Theta
  cur_Theta <- diag((exp(log.theta_vec))^2) # parameterized as log(sigma_e)
  # cur_Theta <- diag(((log.theta_vec))^2) # TEMP
  
  ni = length(Yi)/k
  
  # these gradient functions are from the C++ file
  c(c(grad_lambda_cpp(k, ni, Yi, cur_Lambda, cur_Sigma_u, cur_Theta, Psi_i, nonzero)),
    c(grad_sigma_u_cpp(k, ni, Yi, cur_Lambda, cur_Sigma_u, cur_Theta, Psi_i, nonzero)),
    c(grad_sigma_e_cpp(k, ni, Yi, cur_Lambda, cur_Sigma_u, cur_Theta, Psi_i, nonzero)))
}

################################################################################
## Minimization
################################################################################

start_time <- Sys.time()

fit <- nlm(f = FA_negllk, p = m_params_vec, Psi_list = Psi_list,
           check.analyticals = FALSE, stepmax = 10,
           gradtol = 1e-6, steptol = 1e-6, iterlim = 200)

end_time <- Sys.time()
run_time <- as.numeric(end_time) - as.numeric(start_time)
